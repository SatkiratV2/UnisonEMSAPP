@page "/employees"
@inject NavigationManager Navigation
﻿

<h1>Employee System</h1>

<p>Manage your employees.</p>

@if (employees.Count > 0)
{
    <input type="text" @bind-value="searchTerm" placeholder="Search by name..." />
    <button class="btn btn-primary" @onclick="SearchEmployees">Search</button>
    <button class="btn btn-secondary" @onclick="ClearFilters">Clear Filters</button>
}

@if (employees == null || filteredEmployees == null)
{
    <p>No employees found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Hourly Salary</th>
                <th>Date Hired</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in filteredEmployees ?? employees)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>$@employee.HourlySalary</td>
                    <td>@employee.DateHired.ToShortDateString()</td>
                    <td><button class="btn btn-danger" @onclick="() => RemoveEmployee(employee)">Remove</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<button class="btn btn-primary" @onclick="AddEmployee">Add Employee</button>

<input type="text" @bind-value="newEmployeeName" placeholder="Enter employee name" />
<input type="number" step="0.01" @bind-value="newEmployeeSalary" placeholder="Enter employee hourly salary" />

@code {
    private List<Employee> employees = new List<Employee>();
    private string newEmployeeName = string.Empty;
    private decimal newEmployeeSalary = 0;
    private string searchTerm = string.Empty;
    private List<Employee>? filteredEmployees;

    private void AddEmployee()
    {
        // Add a new employee with today's date as the date hired
        employees.Add(new Employee { Name = newEmployeeName, HourlySalary = newEmployeeSalary, DateHired = DateOnly.FromDateTime(DateTime.Now) });
        newEmployeeName = string.Empty;
        newEmployeeSalary = 0;
        filteredEmployees = employees;
    }

    private void RemoveEmployee(Employee employee)
    {
        // Remove the specified employee
        employees.Remove(employee);
        filteredEmployees = employees;
    }

    private void SearchEmployees()
    {
        // Filter the employees list based on the search term
        filteredEmployees = employees.Where(e => e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ClearFilters()
    {
        // Clear the search term and display all employees
        searchTerm = string.Empty;
        
    }

    private class Employee
    {
        public string Name { get; set; }
        public decimal HourlySalary { get; set; }
        public DateOnly DateHired { get; set; }
    }
}